
import React, { useState, useEffect } from "react";
import { useParams, useNavigate } from "react-router-dom";
import { useSubcategory } from "@/hooks/useSubcategories";
import { useInspiringContent } from "@/hooks/useInspiringContent";
import { useContentExamples } from "@/hooks/useContentExamples";
import { useExemplaryAccounts } from "@/hooks/useExemplaryAccounts";
import { useContentTitles } from "@/hooks/useContentTitles";
import { 
  useSubcategoryHooks, 
  useSubcategoryHashtags, 
  useSubcategoryMetrics, 
  useSubcategoryTemplates,
  useAutoGenerateContent
} from "@/hooks/useAutoGeneratedContent";
import { ArrowLeft, Video, Users, BarChart3, Layout, Lightbulb } from "lucide-react";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { Button } from "@/components/ui/button";
import InspiringContentCard from "@/components/InspiringContentCard";
import ContentExampleCard from "@/components/ContentExampleCard";
import ExemplaryAccountCard from "@/components/ExemplaryAccountCard";
import StandardizedContentTabs from "@/components/StandardizedContentTabs";
import Navigation from "@/components/Navigation";
import ExpandableText from "@/components/ExpandableText";
import { useToast } from "@/hooks/use-toast";

const SubcategoryDetails = () => {
  const { categoryId, subcategoryId } = useParams();
  const navigate = useNavigate();
  const [activeTab, setActiveTab] = useState("standardized");
  const { toast } = useToast();
  const { generateContent } = useAutoGenerateContent();

  const { data: subcategory, isLoading: subcategoryLoading, refetch: refetchSubcategory } = useSubcategory(subcategoryId!);
  const { data: inspiringContent, isLoading: inspiringLoading } = useInspiringContent(subcategoryId);
  const { data: contentExamples, isLoading: examplesLoading } = useContentExamples(subcategoryId);
  const { data: exemplaryAccounts, isLoading: accountsLoading } = useExemplaryAccounts(subcategoryId);
  const { data: contentTitles, isLoading: titlesLoading } = useContentTitles(subcategoryId);

  // Hooks pour le contenu auto-généré
  const { data: autoHooks, refetch: refetchHooks } = useSubcategoryHooks(subcategoryId!);
  const { data: autoHashtags, refetch: refetchHashtags } = useSubcategoryHashtags(subcategoryId!);
  const { data: autoMetrics, refetch: refetchMetrics } = useSubcategoryMetrics(subcategoryId!);
  const { data: autoTemplates, refetch: refetchTemplates } = useSubcategoryTemplates(subcategoryId!);

  // Générer automatiquement le contenu si nécessaire
  useEffect(() => {
    if (subcategory && !subcategory.auto_generation_completed) {
      handleAutoGenerate();
    }
  }, [subcategory]);

  const handleAutoGenerate = async () => {
    if (!subcategoryId) return;
    
    try {
      toast({
        title: "Génération en cours...",
        description: "Création du contenu standardisé (20 titres, 20 hooks, 10 hashtags).",
      });

      await generateContent(subcategoryId);
      
      // Rafraîchir toutes les données
      await Promise.all([
        refetchSubcategory(),
        refetchHooks(),
        refetchHashtags(), 
        refetchMetrics(),
        refetchTemplates()
      ]);

      toast({
        title: "Contenu généré !",
        description: "Le contenu standardisé a été créé avec succès.",
      });
    } catch (error) {
      console.error('Error generating content:', error);
      toast({
        title: "Erreur",
        description: "Impossible de générer le contenu automatiquement.",
        variant: "destructive"
      });
    }
  };

  if (subcategoryLoading) {
    return (
      <div className="min-h-screen bg-black">
        <Navigation />
        <div className="creatik-container pt-20">
          <div className="flex items-center justify-center h-64">
            <div className="text-center">
              <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-creatik-primary mx-auto mb-4"></div>
              <p className="text-gray-300">Chargement...</p>
            </div>
          </div>
        </div>
      </div>
    );
  }

  if (!subcategory) {
    return (
      <div className="min-h-screen bg-black">
        <Navigation />
        <div className="creatik-container pt-20">
          <div className="text-center py-12">
            <h1 className="text-2xl font-bold text-white mb-4">
              Sous-catégorie non trouvée
            </h1>
            <button
              onClick={() => navigate(`/categories/${categoryId}`)}
              className="text-creatik-primary hover:underline"
            >
              Retour à la catégorie
            </button>
          </div>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-black">
      <Navigation />
      
      <div className="creatik-container pt-20 pb-8">
        {/* Header */}
        <div className="mb-8">
          <button
            onClick={() => navigate(`/categories/${categoryId}`)}
            className="flex items-center gap-2 text-gray-300 hover:text-creatik-primary transition-colors mb-4"
          >
            <ArrowLeft size={16} />
            Retour à {subcategory.category?.name}
          </button>
          
          <div className="flex items-center justify-between mb-4">
            <h1 className="text-3xl font-bold text-white">
              {subcategory.name}
            </h1>
            
            {!subcategory.auto_generation_completed && (
              <Button 
                onClick={handleAutoGenerate}
                className="bg-creatik-primary hover:bg-creatik-primary/80"
              >
                Générer le contenu
              </Button>
            )}
          </div>
          
          {subcategory.description && (
            <p className="text-gray-300 text-lg mb-4">
              {subcategory.description}
            </p>
          )}

          {/* Définition de la sous-catégorie */}
          {subcategory.definition && (
            <div className="mb-6">
              <h3 className="text-lg font-semibold text-white mb-2">
                Définition
              </h3>
              <ExpandableText 
                text={subcategory.definition}
                className="text-gray-300"
              />
            </div>
          )}

          {/* Indicateur de contenu standardisé */}
          {subcategory.auto_generation_completed && (
            <div className="mb-6 p-4 bg-green-900/20 border border-green-700 rounded-lg">
              <p className="text-green-400 text-sm">
                ✅ Contenu standardisé généré : 20 titres, 20 hooks, 10 hashtags
              </p>
            </div>
          )}
        </div>

        {/* Content Tabs */}
        <Tabs value={activeTab} onValueChange={setActiveTab} className="w-full">
          <TabsList className="grid w-full grid-cols-5 mb-8 bg-gray-800 border-gray-700">
            <TabsTrigger value="standardized" className="flex items-center gap-2 data-[state=active]:bg-creatik-primary data-[state=active]:text-white text-gray-300">
              <span className="hidden sm:inline">Contenu standardisé</span>
              <span className="sm:hidden">Standard</span>
            </TabsTrigger>
            
            <TabsTrigger value="metrics" className="flex items-center gap-2 data-[state=active]:bg-creatik-primary data-[state=active]:text-white text-gray-300">
              <BarChart3 size={16} />
              <span className="hidden sm:inline">Métriques</span>
            </TabsTrigger>
            
            <TabsTrigger value="templates" className="flex items-center gap-2 data-[state=active]:bg-creatik-primary data-[state=active]:text-white text-gray-300">
              <Layout size={16} />
              <span className="hidden sm:inline">Templates</span>
            </TabsTrigger>
            
            <TabsTrigger value="accounts" className="flex items-center gap-2 data-[state=active]:bg-creatik-primary data-[state=active]:text-white text-gray-300">
              <Users size={16} />
              <span className="hidden sm:inline">Comptes</span>
            </TabsTrigger>
            
            <TabsTrigger value="inspiration" className="flex items-center gap-2 data-[state=active]:bg-creatik-primary data-[state=active]:text-white text-gray-300">
              <Video size={16} />
              <span className="hidden sm:inline">Inspiration</span>
            </TabsTrigger>
          </TabsList>

          {/* Contenu standardisé (20 titres, 20 hooks, 10 hashtags) */}
          <TabsContent value="standardized">
            <StandardizedContentTabs
              contentTitles={contentTitles || []}
              autoHooks={autoHooks || []}
              autoHashtags={autoHashtags || []}
              titlesLoading={titlesLoading}
            />
          </TabsContent>

          {/* Métriques */}
          <TabsContent value="metrics">
            <div className="space-y-4">
              <h2 className="text-xl font-semibold text-white">
                Métriques de performance
              </h2>
              
              {autoMetrics && autoMetrics.length > 0 ? (
                <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
                  {autoMetrics.map((metric) => (
                    <div
                      key={metric.id}
                      className="bg-gray-900 rounded-xl p-4 border border-gray-800 hover:shadow-md transition-shadow"
                    >
                      <h3 className="font-medium text-white mb-2">
                        {metric.metric_name}
                      </h3>
                      <p className="text-gray-300 text-sm">
                        {metric.metric_description}
                      </p>
                    </div>
                  ))}
                </div>
              ) : (
                <div className="text-center py-12 text-gray-300">
                  <BarChart3 size={48} className="mx-auto mb-4 opacity-50" />
                  <p>Aucune métrique disponible pour le moment.</p>
                  {!subcategory.auto_generation_completed && (
                    <Button 
                      onClick={handleAutoGenerate} 
                      className="mt-4 bg-creatik-primary hover:bg-creatik-primary/80"
                    >
                      Générer automatiquement
                    </Button>
                  )}
                </div>
              )}
            </div>
          </TabsContent>

          <TabsContent value="templates">
            <div className="space-y-4">
              <h2 className="text-xl font-semibold text-white">
                Templates de contenu
              </h2>
              
              {autoTemplates && autoTemplates.length > 0 ? (
                <div className="grid grid-cols-1 gap-4">
                  {autoTemplates.map((template) => (
                    <div
                      key={template.id}
                      className="bg-gray-900 rounded-xl p-6 border border-gray-800 hover:shadow-md transition-shadow"
                    >
                      <h3 className="font-medium text-white mb-4 text-lg">
                        {template.template_title}
                      </h3>
                      
                      <div className="space-y-4">
                        <div>
                          <h4 className="text-creatik-primary font-medium mb-2">Structure :</h4>
                          <ExpandableText 
                            text={template.template_structure}
                            className="text-gray-300"
                            maxSentences={3}
                          />
                        </div>
                        
                        {template.template_example && (
                          <div>
                            <h4 className="text-creatik-primary font-medium mb-2">Exemple :</h4>
                            <p className="text-gray-300 text-sm italic">
                              {template.template_example}
                            </p>
                          </div>
                        )}
                      </div>
                    </div>
                  ))}
                </div>
              ) : (
                <div className="text-center py-12 text-gray-300">
                  <Layout size={48} className="mx-auto mb-4 opacity-50" />
                  <p>Aucun template disponible pour le moment.</p>
                  {!subcategory.auto_generation_completed && (
                    <Button 
                      onClick={handleAutoGenerate} 
                      className="mt-4 bg-creatik-primary hover:bg-creatik-primary/80"
                    >
                      Générer automatiquement
                    </Button>
                  )}
                </div>
              )}
            </div>
          </TabsContent>

          {/* Exemplary Accounts */}
          <TabsContent value="accounts">
            <div className="space-y-4">
              <h2 className="text-xl font-semibold text-white">
                Comptes exemplaires
              </h2>
              
              {accountsLoading ? (
                <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
                  {[...Array(6)].map((_, i) => (
                    <div key={i} className="h-32 bg-gray-800 rounded-xl animate-pulse" />
                  ))}
                </div>
              ) : exemplaryAccounts && exemplaryAccounts.length > 0 ? (
                <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
                  {exemplaryAccounts.map((account) => (
                    <ExemplaryAccountCard key={account.id} account={account} />
                  ))}
                </div>
              ) : (
                <div className="text-center py-12 text-gray-300">
                  <Users size={48} className="mx-auto mb-4 opacity-50" />
                  <p>Aucun compte exemplaire disponible pour le moment.</p>
                </div>
              )}
            </div>
          </TabsContent>

          {/* Inspiring Content */}
          <TabsContent value="inspiration">
            <div className="space-y-4">
              <h2 className="text-xl font-semibold text-white">
                Contenu inspirant
              </h2>
              
              {inspiringLoading ? (
                <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
                  {[...Array(6)].map((_, i) => (
                    <div key={i} className="h-32 bg-gray-800 rounded-xl animate-pulse" />
                  ))}
                </div>
              ) : inspiringContent && inspiringContent.length > 0 ? (
                <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
                  {inspiringContent.map((content) => (
                    <InspiringContentCard key={content.id} content={content} />
                  ))}
                </div>
              ) : (
                <div className="text-center py-12 text-gray-300">
                  <Lightbulb size={48} className="mx-auto mb-4 opacity-50" />
                  <p>Aucun contenu inspirant disponible pour le moment.</p>
                </div>
              )}
            </div>
          </TabsContent>
        </Tabs>
      </div>
    </div>
  );
};

export default SubcategoryDetails;
