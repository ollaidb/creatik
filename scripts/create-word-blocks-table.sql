-- Script de cr√©ation de la table word_blocks pour la g√©n√©ration de titres
-- Ex√©cutez ce script dans votre base de donn√©es Supabase

-- ========================================
-- 1. CR√âATION DE LA TABLE WORD_BLOCKS
-- ========================================

-- Cr√©er la table word_blocks si elle n'existe pas
CREATE TABLE IF NOT EXISTS word_blocks (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  platform VARCHAR(50) NOT NULL,
  subcategory_id UUID REFERENCES subcategories(id),
  category VARCHAR(50) NOT NULL CHECK (category IN ('subject', 'verb', 'complement', 'twist')),
  words TEXT[] NOT NULL,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- ========================================
-- 2. CR√âATION DES INDEX POUR LES PERFORMANCES
-- ========================================

-- Index pour optimiser les requ√™tes par plateforme
CREATE INDEX IF NOT EXISTS idx_word_blocks_platform ON word_blocks(platform);

-- Index pour optimiser les requ√™tes par sous-cat√©gorie
CREATE INDEX IF NOT EXISTS idx_word_blocks_subcategory ON word_blocks(subcategory_id);

-- Index pour optimiser les requ√™tes par cat√©gorie de mot
CREATE INDEX IF NOT EXISTS idx_word_blocks_category ON word_blocks(category);

-- Index composite pour les requ√™tes fr√©quentes
CREATE INDEX IF NOT EXISTS idx_word_blocks_platform_subcategory ON word_blocks(platform, subcategory_id);

-- ========================================
-- 3. V√âRIFICATION DE LA CR√âATION
-- ========================================

-- V√©rifier que la table a √©t√© cr√©√©e
SELECT 
  CASE 
    WHEN EXISTS (SELECT 1 FROM information_schema.tables WHERE table_name = 'word_blocks') 
    THEN '‚úÖ Table word_blocks cr√©√©e avec succ√®s'
    ELSE '‚ùå Erreur lors de la cr√©ation de word_blocks'
  END as status;

-- V√©rifier la structure de la table
SELECT 
  column_name,
  data_type,
  is_nullable,
  column_default
FROM information_schema.columns 
WHERE table_name = 'word_blocks'
ORDER BY ordinal_position;

-- V√©rifier les index cr√©√©s
SELECT 
  indexname,
  indexdef
FROM pg_indexes 
WHERE tablename = 'word_blocks';

-- ========================================
-- 4. EXEMPLE DE DONN√âES DE TEST
-- ========================================

-- Ins√©rer des donn√©es de test pour "Analyses politiques" sur TikTok
INSERT INTO word_blocks (platform, subcategory_id, category, words) 
SELECT 
  'tiktok',
  s.id,
  'subject',
  ARRAY['Politique', 'Gouvernement', '√âlections', 'Partis', 'D√©put√©s', 'Ministres', 'Pr√©sident', 'Assembl√©e', 'S√©nat', 'Municipales']
FROM subcategories s 
WHERE s.name = 'Analyses politiques'
LIMIT 1;

INSERT INTO word_blocks (platform, subcategory_id, category, words) 
SELECT 
  'tiktok',
  s.id,
  'verb',
  ARRAY['analyse', 'd√©crypte', 'explique', 'r√©v√®le', 'd√©voile', 'expose', 'critique', 'd√©fend', 'soutient', 'condamne']
FROM subcategories s 
WHERE s.name = 'Analyses politiques'
LIMIT 1;

INSERT INTO word_blocks (platform, subcategory_id, category, words) 
SELECT 
  'tiktok',
  s.id,
  'complement',
  ARRAY['en 60 secondes', 'en direct', 'en coulisses', 'les coulisses', 'les secrets', 'les scandales', 'les r√©v√©lations', 'les tendances', 'l''actualit√©', 'le d√©bat']
FROM subcategories s 
WHERE s.name = 'Analyses politiques'
LIMIT 1;

INSERT INTO word_blocks (platform, subcategory_id, category, words) 
SELECT 
  'tiktok',
  s.id,
  'twist',
  ARRAY['üî•', '‚ö°', 'üí•', 'üéØ', 'üìä', 'üîç', 'üí°', 'üö®', 'üé™', 'üåü']
FROM subcategories s 
WHERE s.name = 'Analyses politiques'
LIMIT 1;

-- ========================================
-- 5. V√âRIFICATION DES DONN√âES INS√âR√âES
-- ========================================

-- V√©rifier les donn√©es ins√©r√©es
SELECT 
  'Donn√©es de test ins√©r√©es:' as info,
  platform,
  category,
  array_length(words, 1) as words_count,
  words
FROM word_blocks 
WHERE subcategory_id IN (SELECT id FROM subcategories WHERE name = 'Analyses politiques')
ORDER BY category;

-- Compter le total des mots par cat√©gorie
SELECT 
  category,
  COUNT(*) as blocks_count,
  SUM(array_length(words, 1)) as total_words
FROM word_blocks 
WHERE subcategory_id IN (SELECT id FROM subcategories WHERE name = 'Analyses politiques')
GROUP BY category
ORDER BY category; 