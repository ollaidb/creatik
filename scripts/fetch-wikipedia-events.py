#!/usr/bin/env python3
"""
Script pour r√©cup√©rer les √©v√©nements historiques depuis Wikipedia
et les ins√©rer dans la base de donn√©es Supabase
"""

import requests
import json
import psycopg2
from datetime import datetime, date
import os
from dotenv import load_dotenv

# Charger les variables d'environnement
load_dotenv()

# Configuration Supabase
SUPABASE_URL = os.getenv('SUPABASE_URL')
SUPABASE_KEY = os.getenv('SUPABASE_SERVICE_ROLE_KEY')
DATABASE_URL = os.getenv('DATABASE_URL')

def get_wikipedia_events(month, day):
    """R√©cup√®re les √©v√©nements du jour depuis Wikipedia"""
    url = f"https://fr.wikipedia.org/api/rest_v1/feed/onthisday/all/{month:02d}/{day:02d}"
    
    try:
        response = requests.get(url)
        response.raise_for_status()
        data = response.json()
        
        events = []
        for event in data.get('events', []):
            events.append({
                'year': event.get('year'),
                'text': event.get('text'),
                'pages': event.get('pages', [])
            })
        
        return events
    except Exception as e:
        print(f"Erreur lors de la r√©cup√©ration des √©v√©nements: {e}")
        return []

def insert_event_to_db(event_data, month, day):
    """Ins√®re un √©v√©nement dans la base de donn√©es"""
    try:
        # Connexion √† la base de donn√©es
        conn = psycopg2.connect(DATABASE_URL)
        cursor = conn.cursor()
        
        # Pr√©parer les donn√©es
        event_date = date(2024, month, day)  # Ann√©e actuelle pour l'exemple
        title = event_data['text'][:255]  # Limiter √† 255 caract√®res
        description = event_data['text']
        
        # Ins√©rer l'√©v√©nement
        cursor.execute("""
            INSERT INTO daily_events (event_type, title, description, date, year, category, is_active)
            VALUES (%s, %s, %s, %s, %s, %s, %s)
            ON CONFLICT DO NOTHING
        """, ('evenement', title, description, event_date, event_data['year'], '√âv√©nements historiques', True))
        
        conn.commit()
        cursor.close()
        conn.close()
        
        print(f"‚úÖ √âv√©nement ins√©r√©: {title[:50]}...")
        
    except Exception as e:
        print(f"‚ùå Erreur lors de l'insertion: {e}")

def main():
    """Fonction principale"""
    print("üöÄ D√©but de la r√©cup√©ration des √©v√©nements Wikipedia...")
    
    # R√©cup√©rer les √©v√©nements pour chaque jour de l'ann√©e
    for month in range(1, 13):
        for day in range(1, 32):
            try:
                events = get_wikipedia_events(month, day)
                
                for event in events:
                    insert_event_to_db(event, month, day)
                
                print(f"üìÖ Trait√©: {month:02d}/{day:02d} - {len(events)} √©v√©nements")
                
            except Exception as e:
                print(f"‚ùå Erreur pour {month:02d}/{day:02d}: {e}")
                continue
    
    print("‚úÖ R√©cup√©ration termin√©e!")

if __name__ == "__main__":
    main() 